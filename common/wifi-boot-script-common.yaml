substitutions:
  blackout_time_start: '8'
  blackout_time_end: '20'

# Grab time from homeassistant and setup blackout time for flashing
time:
  - platform: homeassistant
    id: hasstime

binary_sensor:
  - platform: template
    id: outside_blackout_time
    internal: true
    lambda: |-
      auto now = id(hasstime).now();
      int start = atoi("${blackout_time_start}");
      int end = atoi("${blackout_time_end}");
      if (start > end) {
        return !(now.hour >= start || now.hour < end);
      } else {
        return now.hour >= start && now.hour < end;
      }

#ESPhome on boot script
esphome:
  on_boot:
    priority: -100
    then:
      - logger.log: "ESP Booting..."
      - script.execute: save_light_state
      - if:
          condition:
            binary_sensor.is_off: outside_blackout_time
          then:
            - light.turn_off: thelight
      - script.execute: restore_light_state
      # - light.turn_off: thelight

wifi:  
  on_disconnect:
    then:
      - logger.log: "WiFi Disconnected!"
  on_connect:
    then:
      - logger.log: "WiFi Connected!"
      - script.execute: restore_light_state

api:
  on_client_connected:
    then:
      - logger.log: "API connected"

globals:
  - id: light_was_on
    type: bool
    restore_value: no
    initial_value: "false"

script:
  - id: save_light_state
    then:
      - lambda: |-
          id(light_was_on) = id(thelight).remote_values.is_on();

  - id: restore_light_state
    then:
      - light.turn_on:
          id: thelight
          effect: "None"
      - if:
          condition:
            lambda: 'return id(light_was_on);'
          then:
            - light.turn_on:
                id: thelight
          else:
            - light.turn_off:
                id: thelight
