# ============== common package for all diagnostic sensors + reboot timeouts + WiFi fallbacks ============= #
substitutions:
  wifi_power_save: "none" # Light - ESP32 default. None - ESP8266 default
  wifi_output_power: "19db"
  wifi_reboot_time: 2min
  api_reboot_time: 0 # 0 disables api timeout - needed for cloudless
  disable_entities: "true"    # set to "false" to have all entities show up in Home Assistant automatically
  # disable_webserver: "false"

#logging + Debugging
logger:
  level: DEBUG
  logs:
    light: WARN # avoids log spam on light effects
    sensor: INFO # avoids log spam on sensor updates from IR receiver
    text_sensor: INFO

safe_mode:
# API + WiFi Reboot
wifi:
  output_power: ${wifi_output_power}
  power_save_mode: ${wifi_power_save}
  fast_connect: off
  reboot_timeout: ${wifi_reboot_time}
# mDNS announce self
mdns:

api:
  reboot_timeout: ${api_reboot_time}
# OTA error reboot
ota:
  - platform: esphome
    on_error:
      then:
        - button.press: restart_button
  - platform: web_server
    on_error:
      - button.press: restart_button


# Initial debugging # Delete or comment this section when firmware is stable for final version to save space.
debug:
  update_interval: 30s

sensor:
  #Internal board temp
  - platform: internal_temperature
    id: internal_temp
    name: "Chip Temperature"
    icon: mdi:thermometer-lines
    entity_category: diagnostic
    disabled_by_default: false
  #Expose ESP32 wifi signal strength as a sensor
  - platform: wifi_signal
    name: "WiFi Signal"
    icon: mdi:wifi
    id: esp_wifi_signal
  #Raw Uptime value in seconds
  - platform: uptime
    id: uptime_raw
    internal: true


# TEXT SENSORS
text_sensor:
  - platform: debug
    reset_reason:
      name: "Reset Reason"
    device:
      name: "Device Info"
      icon: mdi:information-outline
      disabled_by_default: ${disable_entities}

# Uptime human readable
  - platform: template
    name: "Uptime"
    icon: mdi:timer-outline
    update_interval: 60s
    entity_category: diagnostic
    lambda: |-
      int seconds = (int) id(uptime_raw).state;
      int days = seconds / 86400;
      seconds %= 86400;
      int hours = seconds / 3600;
      seconds %= 3600;
      int minutes = seconds / 60;
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "%dd %dh %dm", days, hours, minutes);
      return {buffer};

  # WIFI INFO and IP address as text sensor
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:ip
      id: wifi_ip
      entity_category: diagnostic
      update_interval: 200s
    ssid:
      name: "WiFi SSID"
      icon: mdi:wifi-cog
      id: wifi_ssid
      entity_category: diagnostic
      update_interval: 200s

# Reboot device buttons
button:
  - platform: restart
    id: restart_button
    name: "Reboot"
    entity_category: diagnostic
    disabled_by_default: ${disable_entities}
# Safe mode
  - platform: safe_mode
    id: safe_mode_button
    name: "Restart (Safe Mode)"
    entity_category: diagnostic
    disabled_by_default: ${disable_entities}
# FACTORY RESET AND BOOT AP
  - platform: factory_reset
    name: "FACTORY RESET"
    id: factory_reset_button
    entity_category: diagnostic
    disabled_by_default: ${disable_entities}
# Dump light config
  - platform: template
    name: Dump Light Config
    entity_category: config
    icon: "mdi:text-long"
    internal: true
    on_press:
      lambda: return ESP_LOGCONFIG("LIGHT CONFIG", "Config - red %f green %f blue %f cold_white %f warm_white %f mode %u", id(light_primary).current_values.get_red(), id(light_primary).current_values.get_green(), id(light_primary).current_values.get_blue(), id(light_primary).current_values.get_cold_white(), id(light_primary).current_values.get_warm_white(), id(light_primary).current_values.get_color_mode());
